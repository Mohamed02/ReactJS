1. AngularJS vs React JS:
https://www.gurutechnolabs.com/angularjs-vs-reactjs/ 
https://www.geeksforgeeks.org/angular-vs-reactjs-which-one-is-most-in-demand-frontend-development-framework-in-2019/

2. What are pure functions:

The function which gives the same output for a given input variable (all the time) are called as pure functions. The function also must not modify any scope outside
the function scope

    the function arguments(objects) are passed by reference, hence a funciton could accidently modify the scope outside of it . Please refer to the below example
    
      function fun1={ var p1={name:"ismail"}; fun2(p1); console.log("value of name"+p1.name)}
     funciton fun2(p2){  p2.name="zaina"; console.log("value of updated name is "+ p2.name)}  
     
3. What is virtual DOM and immutablity
 
    Virtual DOM is an concept of storing the copy of entire page DOM structure in memory. So whenever there is a change in state value, the exact changes
    in the State are tracked and Virutal DOM is updated first and the changes are then merged with the Browser DOM. This process is called reconciliation
    . For this reason it is strictly recommended to not to mutate the state. that is whenever you want to change the state, 
    create a copy of the state and then update the changes there.  What react do is , it will compare the two objects and re render the DOM which 
    corresponds to the updated data.
    
    
 4. How to achieve immutablity.
  
     Immutablity can be taken care only for non-primitive data types , which are passed by reference. Primitive data types are passed by value
        
    for e.g

    function Func1(){
        var _a=1;
        var _b=[1,2,3];
        console.log("In Func1 Value of A: "+ _a + " and B "+ _b +" before function invocation");
        Func2(_a,_b);
        console.log("In Func1 Value of A: "+ _a + " and B "+ _b +" after function invocation");
    };

    function Func2(a,b){
        a=5;
        b.push(10);
        console.log("In Func2 Value of A: "+ a + " and B"+ b );
    }

    Func1();

  In the output of above code, if we notice the that inside function Func1, the value of _b is modified after invocation of Func2.This is 
  because, the value of _b is passed by reference to function - Func2. And when the value of b is modified within Func2, the main object is modified
  the which means that Func2 is not a  "Pure function" as it has modified some variable in the scope outside of it through mutation of b. 
  
  To avoid such muation let us create a new object inside Func2 and return that
  
   function Func1(){
            var _a=1;
            var _b=[1,2,3];
            console.log("In Func1 Value of A: "+ _a + " and B "+ _b +" before function invocation");
            Func2(_a,_b);
            console.log("In Func1 Value of A: "+ _a + " and B "+ _b +" after function invocation");
        };
        
        function Func2(a,b){
            a=5;
            c=b.concat(10);
            console.log("In Func2 Value of A: "+ a + " and B"+ c );
        }
     
        Func1();
        
5. LifeCycle of React Components 

   React Components go through stages such as 
            Mounting (ie when it is initially rendered), 
            Update (ie updated caused when any change in the state) and 
            UnMounting stage (ie when the component it removed from the DOM)
            
            
            There several methods which gets invoked during these stages
            
            During Mounting
                        Constructor(prop)    
                             Do State Initialization here
                        getDerivedStateFromProps(props, state) ;
                               ----if the state of the component has to be derived from teh props, then create a derived state and return the object 
                               . this method is better used durign component update.
                              
                         render();
                            ---- Return the ELEMENT which has to be rendrered.
                        ComponentDidMount();   
                                ----Make Rest Calls for loading data here  or in useEffect method 
                                ----Dont call set state here ..becuase it will again call render and it will be in infinite loop
                                ---- No Return value
             During Update
                        getDerivedStateFromProps();
                            -- if the state of the component has to be derived from teh props, then create a derived state and return the object 
                        ShouldCompoenentUdpate(nextProps, nextState);
                            --By default it will return true and the component will be updated every time whenver there is change in the state. But you 
                            can override it by doing some check to prevent compoennt from udpating. a component whcih doesnt override the default behaviour is
                            called as Pure Components
                        render();
                        getSnapShotBeforeUpdate(prevProps, prevState);  
                            -- This is invoked right before the most recently rendered output is committed to DOM. it enables your compoenent to capture some 
                            information. from the dom, before it is potentialy changed. teh value returned by this method is passed as the parameter for 
                            CompoentDidupdate(prevProps, prevState, snapshotValue)
                        ComponentDidupdate(prevProps, prevState, snapShot);
                            --This is the best place to do network request
                            ------Dont call set state here ..becuase it will again call render and it will be in infinite loop. If you call then wrap
                            it inside some condition
              During UnMounting
                        ComponentWillUnMount();
                            this is invoked befroe teh component is unmounterd and destoried. Invaldiate timers, cancel network request and other cleanup
                            operations to be done here.
                        
      Error Handling methods:
                        getDerviedStateFromErrror();
                        componentDidCatch()


6. Memoization
    if a function is a pure function it returns same value for a given input always. and its ouput changes only when the input is changed.
    
   then if the function is called with the same input again and again, it is better to store the  output somewhere to use it next instead of calling 
   the funciton , This concept is called memoization.
